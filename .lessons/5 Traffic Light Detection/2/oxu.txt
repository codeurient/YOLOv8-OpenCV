1) ∆èn birinci istifad…ô etdiyimiz kodlar standart qo≈üulma v…ô kitabxana y√ºkl…ôm…ô kodlarƒ±mƒ±zdƒ±.  ≈û…ôkil 1







2) Sonra internetd…ôn ≈ü…ôkil endiririk v…ô onun segmentasiyasƒ±nƒ± test edirik. ≈û…ôkild…ô n…ôl…ôr i≈üar…ôtl…ôn…ôc…ôk onlara fikir ver…ôk.   
M…ôs…ôl…ôn, avtobus, ma≈üƒ±n, adam v…ô.s              ≈û…ôkil 2  

H…ômin kod i≈ü…ô d√º≈üd√ºkd…ô:          1ci olaraq   `yolov8l.pt`    faylƒ± yaradƒ±lƒ±r,                2ci olaraq  ≈ü…ôkil endirilir,               3c√º olaraq run qovluƒüu yaradƒ±lƒ±r.   






3) N√∂vb…ôti …ômr python implimentasiyasi olacaqdƒ±r. Bu …ômri i≈ü…ô saldƒ±qda ≈ü…ôkild…ô olan b…ôzi obyektl…ôr i≈üar…ôtl…ônm…ôy…ôc…ôk. ≈û…ôkil 3 - 1,   ≈û…ôkil 3- 2





≈û…ôkil 2    v…ô   ≈û…ôkil 3 - 1    d…ô olan iki kod arasƒ±nda …ôsas f…ôrq deteksiya prosesi v…ô m…ôlumatƒ±n haradan g…ôldiyi il…ô baƒülƒ±dƒ±r. G…ôlin f…ôrql…ôri t…ôhlil ed…ôk:

Birinci kod:   !yolo detect predict model=yolov8l.pt source="..."
‚úÖ X√ºsusiyy…ôtl…ôri:
    - Burada Ultralytics YOLO CLI (komanda s…ôtri) istifad…ô olunur.
    - Model avtomatik olaraq tam t…ôsvir √ºz…ôrind…ô i≈ül…ôyir.
    - YOLO CLI ehtimal ki, b√ºt√ºn obyektl…ôri deteksiya edir v…ô son n…ôtic…ôni fayla yazƒ±r.
    - Siz sad…ôc…ô deteksiya olunmu≈ü ≈ü…ôkili y√ºkl…ôyirsiniz v…ô onu cv2.imread() il…ô oxuyursunuz.
üü¢ N…ôtic…ô:
    - B√ºt√ºn obyektl…ôr a≈ükar edilir: avtobus, ma≈üƒ±n, i≈üƒ±qfor, insanlar (≈üofer daxil olmaqla).




ƒ∞kinci kod: results = model(img)[0]
‚úÖ X√ºsusiyy…ôtl…ôri:
    - Burada Python API (ultralytics.YOLO) istifad…ô olunur.
    - Modeli birba≈üa Python kodu daxilind…ô √ßaƒüƒ±rƒ±rsƒ±nƒ±z.
    - ≈û…ôkil …ôvv…ôlc…ôd…ôn cv2.imread() il…ô oxunur v…ô deteksiyaya g√∂nd…ôrilir.
    - N…ôtic…ôl…ôr …ôl il…ô filtr edilir (if score > 0.5 v…ô class_id il…ô).
